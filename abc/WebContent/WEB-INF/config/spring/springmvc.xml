<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">
		
	<!-- 定义通过类名.do形式访问controller -->
	<!-- <bean class="org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping"></bean> -->
	<bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"></bean>
	<!-- 处理器适配器 -->
	<bean class="org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter"></bean>
	
	<!-- 根据bean(自定义controller)的name属性的url去寻找执行类controller -->
	<bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"></bean>
	
	<bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
		<property name="mappings">
			<props>
				<prop key="/main.do">http</prop>
			</props>
		</property>
	</bean>
	
	<bean id="http" class="com.neuedu.test.controller.HttpController"></bean>
	
	<!-- 命令对象 -->
	<bean name="/commond.do" class="com.neuedu.test.controller.CommonController"></bean>
	<!-- 跳转到命令对象controller的controller -->
	<bean name="/toadd.do" class="com.neuedu.test.controller.ToaddController"></bean>
	
	
	
	
	
	
	
		
	<!-- 组件扫描Controller包下的所有类，完成bean的创建及自动的依赖注入 @Component,@Controller,@Respotory,@Service-->
	<!-- <context:component-scan base-package="com.neuedu.test*.controller"></context:component-scan> -->
	
	<!-- 使用mvc:annotation-driven代替注解映射器和注解适配器，mvc:annotation-driven默认加载跟多的参数绑定方法，比如json转换解析器就默认加载了-->
	<!-- <mvc:annotation-driven conversion-service="conversionService"></mvc:annotation-driven> -->
	
	<!-- 将DateFormatter注册到ConversionService中，最后再将ConversionService注册到SpringMVC中 -->
	<bean id="conversionService" 
		class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<property name="formatters">
			<set>
				<!-- 自定义的转换器 -->
				<!-- <bean class="com.neuedu.attendance.common.converter.DateFormatter"></bean> -->
			</set>
		</property>
	</bean>
	
	<!-- 配置视图解析器，解析jsp，默认使用jstl标签，classpath下的所有jstl的包 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/jsp"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>
	
	<!-- 在ajax请求时，处理json格式转换 -->
     <bean id="jacksonMessageConverter" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">    
        <property name="supportedMediaTypes">
            <list>
              <value>text/html;charset=UTF-8</value>
            </list>
        </property>
     </bean>
     
     <!-- 文件上传 -->
     <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
     	<!-- 默认编码 -->
     	<property name="defaultEncoding" value="utf-8"></property>
     	<!-- 文件上传最大值 -->
     	<property name="maxUploadSize" value="10485760000"></property>
     	<!-- 内存中的最大值 -->
     	<property name="maxInMemorySize" value="40960"></property>
     </bean>
</beans>